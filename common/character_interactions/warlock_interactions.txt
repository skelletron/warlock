cast_vein_snare = {
	category = interaction_category_warlock
	desc = cast_vein_snare_interaction_desc
	send_name = cast_vein_snare_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = vein_snare_perk
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			is_alive = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_2_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			text = stealthy_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_2_spell_cost_value
			}
			hidden_effect = {
				if = {
					limit = {
						scope:actor.learning > 17
						scope:actor.intrigue > 17
						scope:actor.learning > scope:recipient.learning
						scope:actor.intrigue > scope:recipient.intrigue
					}
					scope:recipient = {
						add_character_modifier = { modifier = level_6_vein_snare_victim_modifier days = vein_snare_victim_duration }
					}
				}
				else_if = {
					limit = {
						scope:actor.learning > 13
						scope:actor.intrigue > 13
						scope:actor.learning > scope:recipient.learning
						scope:actor.intrigue > scope:recipient.intrigue
					}
					scope:recipient = {
						add_character_modifier = { modifier = level_5_vein_snare_victim_modifier days = vein_snare_victim_duration }
					}
				}
				else = {
					random_list = {
						25 = {
							scope:recipient = {
								add_character_modifier = { modifier = level_4_vein_snare_victim_modifier days = vein_snare_victim_duration }
							}
						}
						25 = {
							scope:recipient = {
								add_character_modifier = { modifier = level_3_vein_snare_victim_modifier days = vein_snare_victim_duration }
							}
						}
						25 = {
							scope:recipient = {
								add_character_modifier = { modifier = level_2_vein_snare_victim_modifier days = vein_snare_victim_duration }
							}
						}
						25 = {
							scope:recipient = {
								add_character_modifier = { modifier = level_1_vein_snare_victim_modifier days = vein_snare_victim_duration }
							}
						}
					}
				}
			}
		}

		# scope:recipient = {
		# 	add_character_modifier = { modifier = vein_snare_victim_modifier days = vein_snare_victim_duration }
		# }
	}
}

raise_undead = {
	category = interaction_category_warlock
	desc = raise_undead_interaction_desc
	send_name = raise_undead_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = raise_undead_perk
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			is_alive = yes
			is_ruler = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_4_spell_cost_value
		# scope:actor.piety >= 5
	}

	auto_accept = {
		custom_description = {
			text = stealthy_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_4_spell_cost_value
				# subtract = 5
			}
		}

		# scope:actor = { save_scope_as = warlock }
		# scope:recipient = { save_scope_as = target }

		# trigger_event = warlock_raise_undead.0001
		scope:recipient = { trigger_event = warlock_raise_undead.0001}
	}
}

cast_dynasticide = {
	category = interaction_category_warlock
	desc = cast_dynasticide_interaction_desc
	send_name = cast_dynasticide_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = dynasticide_perk
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			is_alive = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_6_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			text = stealthy_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_6_spell_cost_value
			}
			# hidden_effect = {

			# }
		}
		scope:recipient = {
			dynasty = {
				add_dynasty_modifier = {
					modifier = blood_curse_modifier
				}
			}
		}

		# scope:recipient = {
		# 	add_character_modifier = { modifier = vein_snare_victim_modifier days = vein_snare_victim_duration }
		# }
	}
}

# dynasty_of_many_crowns_effects = {
# 	dynasty = {
# 		add_dynasty_modifier = {
# 			modifier = dynasty_of_many_crowns
# 		}
# 		add_dynasty_prestige = monumental_dynasty_prestige_gain
# 	}
# }

cast_succubus = {
	category = interaction_category_warlock
	desc = cast_vein_snare_interaction_desc
	send_name = cast_vein_snare_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = succubus_perk
			is_adult = yes
			is_pregnant = no 
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			is_alive = yes
			is_adult = yes
			is_pregnant = no 
		}
		OR = {
			AND = {
				scope:recipient = { is_female = yes }
				scope:actor = { is_male = yes }
			}
			AND = {
				scope:recipient = { is_male = yes }
				scope:actor = { is_female = yes }
			}
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_1_spell_cost_value
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_1_spell_cost_value
			}
		}
		scope:actor = { trigger_event = debug.0002 }
	}
}

cast_wall_of_bone = {
	category = interaction_category_warlock
	desc = cast_wall_of_bone_interaction_desc
	send_name = cast_wall_of_bone_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = wall_of_bone_perk
		}
		scope:recipient = {
			# this = scope:actor
			is_ruler = yes
			is_alive = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_2_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			# text = stealthy_auto_accept_interaction
			text = helpful_spell_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}
	
	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_2_spell_cost_value
			}
		}
		scope:recipient = {
			if = {
				limit = {
					NOT = { this = scope:actor}
				}
				add_opinion = {
					modifier = cast_wall_of_bone_opinion_modifier
					target = scope:actor
				}
			}
			hidden_effect = {
				add_character_modifier = {
					modifier = wall_of_bone_self_modifier
					years = wall_of_bone_years_duration
				}
				if = {
					limit = { is_ruler = yes}
					every_realm_province = {
						add_province_modifier = {
							modifier = wall_of_bone_modifier
							years = wall_of_bone_years_duration
						}
						# province_modifier = {
						# 	defender_holding_advantage = normal_building_advantage_tier_8
						# 	fort_level = normal_building_fort_level_tier_8
						# 	supply_limit = 600
						# }
						# refill_levy = yes
						# refill_garrison = yes
					}
				}
			}
		}
	}
}

# later on turn this into a ritual (scheme)
create_thrall_spell = {
	category = interaction_category_warlock
	desc = create_thrall_spell_interaction_desc
	send_name = create_thrall_spell_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = create_puppet_perk
		}
		scope:recipient = {
			NOT = {
				this = scope:actor
				has_trait = warlock
				# has_opinion_modifier = {
				# 	modifier = thrall_opinion_modifier
				# 	target = scope:actor
				# }
				has_character_flag = is_thrall_flag
			}
			is_alive = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_3_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			text = stealthy_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_3_spell_cost_value
			}
			add_character_modifier = { modifier = maintaining_thralls_modifier }
		}

		hidden_effect = {
			scope:recipient = {
				add_opinion = {
					modifier = thrall_opinion_modifier
					target = scope:actor
				}
				add_character_flag = { flag = is_thrall_flag }
				add_character_modifier = { modifier = dulled_sense_of_self }
			}
		}
	}
}

release_thrall_interaction = {
	category = interaction_category_warlock
	desc = release_thrall_spell_interaction_desc
	send_name = release_thrall_spell_interaction
	use_diplomatic_range = no
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			# dont need to be a warlock, in case player quits warlockdom.
			# has_trait = warlock

			# dont need the perk to remove thrall. in case player resets perks
			# has_perk = create_puppet_perk
		}
		scope:recipient = {
			has_opinion_modifier = {
				modifier = thrall_opinion_modifier
				target = scope:actor
			}
			has_character_flag = is_thrall_flag
			is_alive = yes
		}
	}

	# is_valid = {
	# 	scope:actor = {
	# 		NOT = { is_imprisoned = yes}
	# 	}
	# }

	auto_accept = {
		custom_description = {
			text = thralls_must_obey_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:recipient = {
			remove_opinion = {
				modifier = thrall_opinion_modifier
				target = scope:actor
			}
			remove_character_modifier = dulled_sense_of_self
			remove_character_flag = is_thrall_flag
			if = {
				limit = { has_character_modifier = tithed_thrall_modifier}
				remove_character_modifier = tithed_thrall_modifier
			}
		}
		scope:actor = {
			if = {
				limit = { has_character_modifier = receiving_thrall_tithe_modifier }
				remove_character_modifier = receiving_thrall_tithe_modifier
			}
			remove_character_modifier = maintaining_thralls_modifier
		}
	}
}

dominate_thrall_interaction = {
	category = interaction_category_warlock
	desc = dominate_thrall_interaction_desc
	send_name = dominate_thrall_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = dominate_puppet_perk
		}
		scope:recipient = {
			has_opinion_modifier = {
				target = scope:actor
				modifier = thrall_opinion_modifier
			}
		}

	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_1_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			text = thralls_must_obey_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_1_spell_cost_value
			}
			hidden_effect = {
				if = {
					limit = {
						has_hook = scope:recipient
					}
					remove_hook = {
						target = scope:recipient
						type = loyalty_hook
					}
				}
			}
			add_hook = {
				target = scope:recipient
				type = loyalty_hook
			}
		}
	}
}

# scope:actor = {	
# 	remove_hook = {
# 		target = scope:recipient
# 		type = house_head_hook
# 	}
# }

tithe_thrall_interaction = {
	category = interaction_category_warlock
	desc = tithe_thrall_interaction_desc
	send_name = tithe_thrall_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
			# change to extort_puppet_perk later
			has_perk = tithe_puppet_perk
		}
		scope:recipient = {
			# this checks that they are your thrall
			has_opinion_modifier = {
				target = scope:actor
				modifier = thrall_opinion_modifier
			}
			NOT = {
				has_character_modifier = tithed_thrall_modifier
			}
		}
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			text = thralls_must_obey_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}

	on_accept = {
		scope:actor = {
			add_character_modifier = {
				modifier = receiving_thrall_tithe_modifier
			}
		}
		scope:recipient = {
			add_character_modifier = {
				modifier = tithed_thrall_modifier
			}
		}
	}
}

stop_tithing_thrall_interaction = {
	category = interaction_category_warlock
	desc = tithe_thrall_interaction_desc
	send_name = tithe_thrall_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		# scope:actor = {
		# 	# should be able to stop getting tithes even if stopped being warlock
		# 	# has_trait = warlock

		# 	# should be able to stop getting tithes even if lost skill points through respeccing
		# 	# has_perk = create_puppet_perk
		# 	# has_character_modifier = receiving_thrall_tithe_modifier
		# }
		scope:recipient = {
			# this checks that they are your thrall
			has_opinion_modifier = {
				target = scope:actor
				modifier = thrall_opinion_modifier
			}
			has_character_modifier = tithed_thrall_modifier
		}
	}

	auto_accept = {
		custom_description = {
			text = thralls_must_obey_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:actor = {
			remove_character_modifier = receiving_thrall_tithe_modifier
		}
		scope:recipient = {
			remove_character_modifier = tithed_thrall_modifier
		}
	}
}

summon_thrall_to_war = {
	category = interaction_category_diplomacy
	desc = call_ally_interaction_desc
	interface_priority = 60
	interface = call_ally
	special_interaction = call_ally_interaction
	popup_on_receive = yes
	pause_on_receive = yes

	greeting = positive
	notification_text = CALL_ALLY_NOTIFICATION

	is_shown = {
		scope:actor = {
			is_at_war = yes
			has_trait = warlock
			has_perk = weaponize_puppet_perk
		}

		scope:recipient = {
			# this checks that they are your thrall
			has_opinion_modifier = {
				target = scope:actor
				modifier = thrall_opinion_modifier
			}
		}

		# dont need to be allied to a thrall to summon them to war
		# scope:recipient = {
		# 	is_allied_to = scope:actor
		# }
		scope:actor = { #If you can call them as a House Member then do that
			NOT = {
				is_character_interaction_valid = {
					recipient = scope:recipient
					interaction = call_house_member_to_war_interaction
				}
			}
		}
	}
	
	has_valid_target = {
		exists = scope:target
	}	

	has_valid_target_showing_failures_only = {
		scope:target = {
			is_war_leader = scope:actor
		}

		joiner_not_already_in_another_war_with_any_target_war_participants_trigger = {
			WARRIOR = scope:actor
			JOINER = scope:recipient
		}
	}

	
	is_valid_showing_failures_only = {
		
		scope:recipient = {
			is_ruler = yes
		}

		# Only War Leaders can call allies
		scope:actor = {
			custom_description = {
				text = must_be_war_leader
				any_character_war = {
					is_war_leader = scope:actor
				}
			}
		}

		# Cannot call the same character multiple times
		scope:actor = {
			custom_description = {
				text = cannot_call_same_character_multiple_times
				subject = scope:recipient
				any_character_war = {
					ALL_FALSE = {
						was_called = scope:recipient
						is_participant = scope:recipient
					}
				}
			}
		}

		# this makes it so vassals can't call lieges to war and lieges can't call vassals to war
		# can_potentially_call_ally_trigger = {
		# 	WARRIOR = scope:actor
		# 	JOINER = scope:recipient
		# }

		# Cannot call a character of the "wrong" religion to a Great Holy War
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { faith = scope:recipient.faith }
				}
				custom_description = {
					text = is_of_wrong_faith_for_holy_war
					subject = scope:actor
					object = scope:recipient
					any_character_war = {
						NOR = {
							using_cb = undirected_great_holy_war
							using_cb = directed_great_holy_war
						}
					}
				}
			}
		}
	}

	can_be_picked = {

		# what does this do?
		can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:actor JOINER = scope:recipient }

		scope:target = {
			is_war_leader = scope:actor

			# not already in target war
			custom_description = {
				text = join_war_interaction_already_in_target_war
				NOR = {
					any_war_attacker = { this = scope:recipient }
					any_war_defender = { this = scope:recipient }
				}
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = call_ally.0001
		}
	}
		
	on_accept = {
		call_ally_interaction_effect = yes

		save_scope_value_as = {
			name = call_ally_interaction
			value = yes
		}

		scope:actor = {
			hidden_effect = { #To nudge friendship
				if = {
					limit = {
						NOR = {
							has_relation_friend = scope:recipient
							has_relation_potential_friend = scope:recipient
						}
					}
					set_relation_potential_friend = scope:recipient
				}
			}
			trigger_event = call_ally.0100
		}
	}
	
	on_decline = {
		#The war could theoretically end on the day the decline is sent
		if = {
			limit = {
				exists = scope:target
			}
			scope:target = {
				if = {
					limit = {
						is_attacker = scope:actor
					}
					scope:actor = {
						add_opinion = {
							modifier = rejected_call_to_offensive_war
							target = scope:recipient
						}
					}
					scope:recipient = {
						add_prestige_experience = major_prestige_loss
					}
				}
				else = {
					scope:actor = {
						add_opinion = {
							modifier = rejected_call_to_defensive_war
							target = scope:recipient
						}
					}
					scope:recipient = {
						add_prestige_experience = massive_prestige_loss
					}
				}
				hidden_effect = {
					if = {
						limit = {
							NOT = { was_called = scope:recipient }
						}
						set_called_to = scope:recipient
					}
				}
			}
			scope:actor = {
				trigger_event = call_ally.0101
			}
		}
	}

	auto_accept = {
		OR = {
			# Always accept a call from a Spouse
			custom_description = {
				text = "recipient_is_spouse"
				subject = scope:actor
				object = scope:recipient
				scope:recipient = {
					is_spouse_of = scope:actor
					is_ai = yes
				}
			}
			# Always accept a call from the Heir
			custom_description = {
				text = "is_recipients_player_heir"
				subject = scope:actor
				object = scope:recipient
				
				exists = scope:recipient.player_heir
				scope:recipient = {
					player_heir = scope:actor
					is_close_or_extended_family_of = scope:actor # Only for family
					is_ai = yes
				}
			}
			# Always accept a call from the one you are heir of
			custom_description = {
				text = "is_player_heir"
				subject = scope:recipient
				object = scope:actor

				exists = scope:actor.player_heir
				scope:actor.player_heir = scope:recipient
				scope:actor = { # Shouldn't be able to force your liege to join just because you've not got any family...
					is_close_or_extended_family_of = scope:recipient
				}
				scope:recipient = {
					is_ai = yes
				}
			}
		}
	}
	
	ai_accept = {
		base = 20

		modifier = {  # Refuse call against Heir
			add = -1000
			exists = scope:recipient.player_heir
			trigger_if = {
				limit = { scope:target.casus_belli.primary_defender = scope:actor }
				scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
			}
			trigger_else = {
				scope:target.casus_belli.primary_defender = scope:recipient.player_heir
			}
			desc = WONT_FIGHT_HEIR_REASON
		}

		modifier = {  # Refuse call against Spouse
			add = -1000
			scope:recipient = {
				trigger_if = {
					limit = { scope:target.casus_belli.primary_defender = scope:actor }
					any_spouse = {
						this = scope:target.casus_belli.primary_attacker
					}
				}
				trigger_else = {
					any_spouse = {
						this = scope:target.casus_belli.primary_defender
					}
				}
				
			}
			desc = WONT_FIGHT_SPOUSE_REASON
		}

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1.0
			desc = AI_OPINION_REASON
		}

		# Honor factor
		ai_value_modifier = {
			ai_honor = 1
			min = 0
		}

		modifier = {  # Tends to join defensive wars
			add = 50
			scope:target.casus_belli.primary_defender = scope:actor
			desc = DEFENSIVE_WAR_REASON
		}

		compare_modifier = { # Likes fighting infidels
			trigger = {
				scope:recipient.faith = scope:actor.faith
				OR = {
					AND = {
						scope:target.casus_belli.primary_attacker = {
							this = scope:actor
							faith = {
								faith_hostility_level = {
									target = scope:target.casus_belli.primary_defender.faith
									value >= religious_cb_enabled_hostility_level
								}
							}
						}
					}
					AND = {
						scope:target.casus_belli.primary_defender = {
							this = scope:actor
							faith = {
								faith_hostility_level = {
									target = scope:target.casus_belli.primary_defender.faith
									value >= religious_cb_enabled_hostility_level
								}
							}
						}
					}
				}
			}
			target = scope:recipient
			value = ai_zeal
			desc = "ZEAL_AGAINST_INFIDELS"
			min = 0
			multiplier = 0.5
		}

		modifier = {  # Reluctant to attack another ally
			add = -50
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:recipient = {
				is_allied_to = scope:target.casus_belli.primary_defender
			}
			desc = ATTACK_ON_ALLY_REASON
		}

		modifier = {  # Reluctant to defend against another ally
			add = -25
			scope:target.casus_belli.primary_defender = scope:actor
			scope:recipient = {
				is_allied_to = scope:target.casus_belli.primary_attacker
			}
			desc = WAR_WITH_ALLY_REASON
		}

		modifier = {  # Reluctant to join wars against religious brethren.
			add = -50
			NOT = { scope:recipient.faith = scope:actor.faith }
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:target.casus_belli.primary_defender.faith = scope:recipient.faith
			scope:target.casus_belli.war = {
				OR = {
					using_cb = minor_religious_war
					using_cb = religious_war
					using_cb = major_religious_war
					using_cb = undirected_great_holy_war
					using_cb = directed_great_holy_war
				}
			}
			desc = WONT_ATTACK_RELIGIOUS_BRETHREN_REASON
		}
	}

	# Score above 0 means the AI will call this ally. Note that DESIRED_WAR_SIDE_STRENGTH still applies and can prevent calling the ally
	ai_will_do = {
		# base = 100
		base = 0
		
		# modifier = { # If the player is at war, do not bother them with offensive calls
		# 	scope:target.casus_belli.primary_attacker = scope:actor
		# 	scope:recipient = {
		# 		is_ai = no
		# 		any_character_war = {
		# 			primary_defender = scope:recipient
		# 		}
		# 	}
		# 	factor = 0
		# }
		
		# modifier = { # Don't call players in against their heirs (they wouldn't accept the reverse situation... don't be a hypocrite)
		# 	exists = scope:recipient.player_heir
		# 	scope:recipient = {			
		# 		is_ai = no
		# 	}
		# 	trigger_if = {
		# 		limit = { scope:target.casus_belli.primary_defender = scope:actor }
		# 		scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
		# 	}
		# 	trigger_else = {
		# 		scope:target.casus_belli.primary_defender = scope:recipient.player_heir
		# 	}
		# 	factor = 0
		# }
		
		# modifier = { # Same with spouses
		# 	scope:recipient = {			
		# 		is_ai = no
		# 	}
		# 	trigger_if = {
		# 		limit = { scope:target.casus_belli.primary_defender = scope:actor }
		# 		any_spouse = {
		# 			this = scope:target.casus_belli.primary_attacker
		# 		}
		# 	}
		# 	trigger_else = {
		# 		any_spouse = {
		# 			this = scope:target.casus_belli.primary_defender
		# 		}
		# 	}
		# 	factor = 0
		# }
		
		# modifier = { # Don't call brand-new allies into old wars, at least until some time has elapsed.
		# 	has_variable = delay_calling_recent_ally
		# 	var:delay_calling_recent_ally = scope:recipient
		# 	scope:target = {
		# 		war_days >= 30
		# 	}
		# 	factor = 0

		# }

		# modifier = { # If the recipient is allied to both the attacker and the defender, the attacker shouldn't call
		# 	scope:target.casus_belli.primary_attacker = scope:actor
		# 	scope:target.casus_belli.primary_defender = {
		# 		is_allied_to = scope:recipient
		# 	}
		# 	factor = 0
		# }
	}
}

# summon_thrall_to_war = {
# 	category = interaction_category_warlock
# 	desc = summon_thrall_to_war_interaction_desc
# 	send_name = summon_thrall_to_war_interaction
# 	use_diplomatic_range = yes
# 	popup_on_receive = no
# 	send_options_exclusive = no
# 	ignores_pending_interaction_block = yes

# 	is_shown = {
# 		scope:actor = {
# 			has_trait = warlock
# 			has_perk = weaponize_puppet_perk
# 			is_at_war = yes
# 			NOT = {
# 				this = scope:recipient
# 			}
# 		}
# 		scope:recipient = {
# 			# is_thrall_of = scope:actor
# 			# see is_spouse_of for implementing mechanics
# 			is_alive = yes
# 			is_ruler = yes
# 		}
# 	}

# 	# what does this do?
# 	has_valid_target = {
# 		exists = scope:target
# 	}

# 	is_valid_showing_failures_only = {
		
# 		scope:recipient = {
# 			is_ruler = yes
# 		}

# 		# NAH, a warlock can ALWAYS call her thralls to battle
# 		# Only War Leaders can call allies
# 		# scope:actor = {
# 		# 	custom_description = {
# 		# 		text = must_be_war_leader
# 		# 		any_character_war = {
# 		# 			is_war_leader = scope:actor
# 		# 		}
# 		# 	}
# 		# }

# 		# Cannot call the same character multiple times
# 		scope:actor = {
# 			custom_description = {
# 				text = cannot_call_same_character_multiple_times
# 				subject = scope:recipient
# 				any_character_war = {
# 					ALL_FALSE = {
# 						was_called = scope:recipient
# 						is_participant = scope:recipient
# 					}
# 				}
# 			}
# 		}

# 		# can_potentially_call_ally_trigger = {
# 		# 	WARRIOR = scope:actor
# 		# 	JOINER = scope:recipient
# 		# }
# 	}

# 	can_be_picked = {
# 		can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:actor JOINER = scope:recipient }

# 		scope:target = {
# 			is_war_leader = scope:actor

# 			# not already in target war
# 			custom_description = {
# 				text = join_war_interaction_already_in_target_war
# 				NOR = {
# 					any_war_attacker = { this = scope:recipient }
# 					any_war_defender = { this = scope:recipient }
# 				}
# 			}
# 		}
# 	}

# 	auto_accept = {
# 		custom_description = {
# 			text = thralls_cannot_stray_auto_accept_interaction
# 			object = scope:recipient
# 		}
# 	}

# 	on_accept = {
# 		call_ally_interaction_effect = yes

# 		save_scope_value_as = {
# 			name = call_ally_interaction
# 			value = yes
# 		}
# 	}

# 	on_decline = {
		
# 	}

# 	on_auto_accept = {
# 		call_ally_interaction_effect = yes

# 		save_scope_value_as = {
# 			name = call_ally_interaction
# 			value = yes
# 		}
# 	}

# 	ai_accept = {
# 		base = 100
# 	}
# }

debug_gain_warlock_xp = {
	category = interaction_category_warlock
	desc = debug_gain_warlock_xp_desc
	send_name = debug_gain_warlock_xp_interaction
	use_diplomatic_range = no
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
		}
		scope:recipient = {
			AND = { this = scope:actor }
			is_alive = yes
			is_ruler = yes
		}
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			text = debug_gain_warlock_xp_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}

	on_accept = {
		scope:recipient = {
			add_warlock_lifestyle_xp = monumental_lifestyle_experience
		}
	}
}

		# # move into own interaction
		# scope:recipient = {
		# 	if = {
		# 		limit = { is_ruler = yes}
		# 		every_realm_province = {
		# 			add_province_modifier = {
		# 				modifier = hostile_mists_modifier
		# 				years = 5
		# 			}
		# 			# province_modifier = {
		# 			# 	defender_holding_advantage = normal_building_advantage_tier_8
		# 			# 	fort_level = normal_building_fort_level_tier_8
		# 			# 	supply_limit = 600
		# 			# }
		# 			# refill_levy = yes
		# 			# refill_garrison = yes
		# 		}
		# 		# every_sub_realm_county = {
		# 			# add_county_modifier = {
		# 			# 	modifier = undead_wreckage_modifier
		# 			# 	years = 20
		# 			# }
		# 		# }
		# 	}
		# }

# if = {
# 	limit = {
# 		scope:treatment_result_treatment = flag:safe
# 		scope:treatment_result_outcome = flag:success
# 	}
# 	if = {
# 		limit = {
# 			has_short_disease_type_trigger = yes
# 			has_high_health_penalty_disease_type_trigger = yes
# 		}
# 		add_character_modifier = { modifier = safe_disease_treatment_success_high_modifier days = disease_treatment_short_duration }
# 	}
# 	else_if = {
# 		limit = {
# 			has_short_disease_type_trigger = no
# 			has_high_health_penalty_disease_type_trigger = yes
# 		}
# 		add_character_modifier = { modifier = safe_disease_treatment_success_high_modifier days = disease_treatment_long_duration }
# 	}
# 	else_if = {
# 		limit = {
# 			has_short_disease_type_trigger = yes
# 			has_high_health_penalty_disease_type_trigger = no
# 		}
# 		add_character_modifier = { modifier = safe_disease_treatment_success_low_modifier days = disease_treatment_short_duration }
# 	}
# 	else_if = {
# 		limit = {
# 			has_short_disease_type_trigger = no
# 			has_high_health_penalty_disease_type_trigger = no
# 		}
# 		add_character_modifier = { modifier = safe_disease_treatment_success_low_modifier days = disease_treatment_long_duration }
# 	}

# give_bubonic_plague_interaction = {
# 	category = interaction_debug_main
# 	use_diplomatic_range = no
# 	ignores_pending_interaction_block = yes
	
# 	interface_priority = -1

# 	is_shown = {
# 		debug_only = yes
# 	}

# 	on_accept = {
# 		scope:recipient = {
# 			add_trait = bubonic_plague
# 		}
# 	}
# 	auto_accept = yes
# }

# add_character_modifier = { modifier = risky_wound_treatment_failure_modifier days = wound_treatment_failure_duration }

# sacrifice_to_the_darkness_interaction = {
# 	category = interaction_category_hostile
# 	desc = sacrifice_to_the_darkness_interaction_desc
# 	send_name = sacrifice_to_the_darkness_interaction
# 	use_diplomatic_range = yes
# 	popup_on_receive = no
# 	send_options_exclusive = no
# 	ai_min_reply_days = 4
# 	ai_max_reply_days = 9

# 	is_shown = {
# 		#scope:recipient.location = { squared_distance = { target = scope:actor.location value <= 4000 } }
# 		scope:actor = {
# 			has_trait = a_touch_of_power_diabolist
# 			is_at_same_location = scope:recipient
# 		}
# 		scope:recipient = { 
# 			NOT = { this = scope:actor }
# 			is_alive = yes
# 		}
# 	}
	
# 	is_valid = {
# 		scope:actor = {
# 			NOT = { is_imprisoned = yes }
# 		}
# 	}

# 	auto_accept = { always = yes }
# 	cooldown = { months = 1 }
# 	cooldown_against_recipient = { years = 1 }

# 	on_send = {
# 		scope:actor = {
# 			trigger_event = diabolist_event.1000
# 		}
# 	}

# 	#Use hook
# 	send_option = {
# 		is_valid = {
# 			scope:actor = {
# 				has_usable_hook = scope:recipient
# 			}
# 		}
# 		flag = hook	
# 		localization = GENERIC_SPEND_A_HOOK
# 	}
# 	should_use_extra_icon = {
# 		scope:actor = { has_usable_hook = scope:recipient }
# 	}
# 	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

# 	on_accept = {
# 		scope:actor = {
# 			custom_tooltip = diabolist_event.1000.sacrifice_attempt
# 			trigger_event = diabolist_event.1010
# 		}
# 	}

# 	on_decline = {
# 	}

# 	auto_accept = {
# 		custom_description = {
# 			text = "spending_hook"
# 			subject = scope:actor
# 			object = scope:recipient
# 			scope:hook = yes
# 		}
# 	}

# 	ai_accept = {
# 		base = 100
# 	}

# 	ai_potential = {
# 		is_at_war = no
# 		is_ruler = yes
# 	}

# 	ai_targets = {
# 		ai_recipients = prisoners
# 		max = 20
# 	}

# 	ai_targets = {
# 		ai_recipients = courtiers
# 		max = 20
# 	}
	
# 	ai_targets = {
# 		ai_recipients = dynasty
# 		max = 20
# 	}
	
# 	ai_targets = {
# 		ai_recipients = family
# 		max = 10
# 	}
	
# 	ai_targets = {
# 		ai_recipients = spouses
# 	}
	
# 	ai_frequency = 12
	
# 	ai_will_do = {
# 		base = 100
# 	}
# }