cast_vein_snare = {
	category = interaction_category_warlock
	desc = cast_vein_snare_interaction_desc
	send_name = cast_vein_snare_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = vein_snare_perk
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			is_alive = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_2_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			text = stealthy_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_2_spell_cost_value
			}
			hidden_effect = {
				if = {
					limit = {
						scope:actor.learning > 17
						scope:actor.intrigue > 17
						scope:actor.learning > scope:recipient.learning
						scope:actor.intrigue > scope:recipient.intrigue
					}
					scope:recipient = {
						add_character_modifier = { modifier = level_6_vein_snare_victim_modifier days = vein_snare_victim_duration }
					}
				}
				else_if = {
					limit = {
						scope:actor.learning > 13
						scope:actor.intrigue > 13
						scope:actor.learning > scope:recipient.learning
						scope:actor.intrigue > scope:recipient.intrigue
					}
					scope:recipient = {
						add_character_modifier = { modifier = level_5_vein_snare_victim_modifier days = vein_snare_victim_duration }
					}
				}
				else = {
					random_list = {
						25 = {
							scope:recipient = {
								add_character_modifier = { modifier = level_4_vein_snare_victim_modifier days = vein_snare_victim_duration }
							}
						}
						25 = {
							scope:recipient = {
								add_character_modifier = { modifier = level_3_vein_snare_victim_modifier days = vein_snare_victim_duration }
							}
						}
						25 = {
							scope:recipient = {
								add_character_modifier = { modifier = level_2_vein_snare_victim_modifier days = vein_snare_victim_duration }
							}
						}
						25 = {
							scope:recipient = {
								add_character_modifier = { modifier = level_1_vein_snare_victim_modifier days = vein_snare_victim_duration }
							}
						}
					}
				}
			}
		}

		# scope:recipient = {
		# 	add_character_modifier = { modifier = vein_snare_victim_modifier days = vein_snare_victim_duration }
		# }
	}
}

raise_undead = {
	category = interaction_category_warlock
	desc = raise_undead_interaction_desc
	send_name = raise_undead_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = raise_undead_perk
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			is_alive = yes
			is_ruler = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_4_spell_cost_value
		# scope:actor.piety >= 5
	}

	auto_accept = {
		custom_description = {
			text = stealthy_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_4_spell_cost_value
				# subtract = 5
			}
		}

		# scope:actor = { save_scope_as = warlock }
		# scope:recipient = { save_scope_as = target }

		# trigger_event = warlock_raise_undead.0001
		scope:recipient = { trigger_event = warlock_raise_undead.0001}
	}
}

cast_temporal_resistance = {
	category = interaction_category_warlock
	desc = cast_temporal_resistance_interaction_desc
	send_name = cast_temporal_resistance_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = temporal_resistance_perk
		}
		scope:recipient = {
			# NOT = { this = scope:actor }
			is_alive = yes
			dynasty = {
				NOT = {
					has_dynasty_modifier = temporal_resistance_modifier
				}
			}
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_5_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			text = stealthy_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_5_spell_cost_value
			}
		}
		scope:recipient = {
			hidden_effect = {
				dynasty = {
					every_dynasty_member = {
						limit = {
							NOT = { this = scope:actor }
						}
						add_opinion = {
							modifier = cast_temporal_resistance_modifier
							target = scope:actor
						}
					}
				}
			}
			dynasty = {
				add_dynasty_modifier = {
					modifier = temporal_resistance_modifier
				}
			}
		}
	}
}

cast_dynasticide = {
	category = interaction_category_warlock
	desc = cast_dynasticide_interaction_desc
	send_name = cast_dynasticide_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = dynasticide_perk
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			is_alive = yes
			dynasty = {
				NOT = {
					has_dynasty_modifier = blood_curse_modifier
				}
			}
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_6_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			text = stealthy_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_6_spell_cost_value
			}
			# hidden_effect = {

			# }
		}
		scope:recipient = {
			dynasty = {
				add_dynasty_modifier = {
					modifier = blood_curse_modifier
				}
			}
		}

		# scope:recipient = {
		# 	add_character_modifier = { modifier = vein_snare_victim_modifier days = vein_snare_victim_duration }
		# }
	}
}

# dynasty_of_many_crowns_effects = {
# 	dynasty = {
# 		add_dynasty_modifier = {
# 			modifier = dynasty_of_many_crowns
# 		}
# 		add_dynasty_prestige = monumental_dynasty_prestige_gain
# 	}
# }

cast_succubus = {
	category = interaction_category_warlock
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = succubus_perk
		}

		scope:recipient = { is_adult = yes }
		scope:actor = { is_adult = yes }
		scope:recipient = { is_pregnant = no }
		scope:actor = { is_pregnant = no }
		scope:recipient = {
			NOT = { this = scope:actor }
		}

		OR = {
			AND = {
				scope:recipient = { is_female = yes }
				scope:actor = { is_male = yes }
			}
			AND = {
				scope:recipient = { is_male = yes }
				scope:actor = { is_female = yes }
			}
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_1_spell_cost_value
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_1_spell_cost_value
			}
		}
		scope:actor = { trigger_event = succubus.1001 }
	}
	
	auto_accept = yes

	# category = interaction_category_warlock
	# desc = cast_succubus_interaction_desc
	# send_name = cast_succubus_interaction
	# use_diplomatic_range = yes
	# popup_on_receive = no
	# send_options_exclusive = no
	# ignores_pending_interaction_block = yes
	# is_shown = {
	# 	scope:actor = {
	# 		has_trait = warlock
	# 		has_perk = succubus_perk
	# 		is_adult = yes
	# 		is_pregnant = no 
	# 	}
	# 	scope:recipient = {
	# 		NOT = { this = scope:actor }
	# 		is_alive = yes
	# 		is_adult = yes
	# 		is_pregnant = no 
	# 	}
	# 	OR = {
	# 		AND = {
	# 			scope:recipient = { is_female = yes }
	# 			scope:actor = { is_male = yes }
	# 		}
	# 		AND = {
	# 			scope:recipient = { is_male = yes }
	# 			scope:actor = { is_female = yes }
	# 		}
	# 	}
	# }

	# is_valid = {
	# 	scope:actor = {
	# 		NOT = { is_imprisoned = yes}
	# 	}
	# }

	# is_valid_showing_failures_only = {
	# 	scope:actor.piety >= level_1_spell_cost_value
	# }

	# on_accept = {
	# 	scope:actor = {
	# 		add_piety = {
	# 			value = 0
	# 			subtract = level_1_spell_cost_value
	# 		}
	# 	}
	# 	scope:actor = { trigger_event = debug.0002 }
	# }

	# auto_accept = yes
}

cast_wall_of_bone = {
	category = interaction_category_warlock
	desc = cast_wall_of_bone_interaction_desc
	send_name = cast_wall_of_bone_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = wall_of_bone_perk
		}
		scope:recipient = {
			# this = scope:actor
			is_ruler = yes
			is_alive = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_2_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			# text = stealthy_auto_accept_interaction
			text = helpful_spell_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}
	
	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_2_spell_cost_value
			}
		}
		scope:recipient = {
			if = {
				limit = {
					NOT = { this = scope:actor}
				}
				add_opinion = {
					modifier = cast_wall_of_bone_opinion_modifier
					target = scope:actor
				}
			}
			hidden_effect = {
				add_character_modifier = {
					modifier = wall_of_bone_self_modifier
					years = wall_of_bone_years_duration
				}
				if = {
					limit = { is_ruler = yes}
					every_realm_province = {
						add_province_modifier = {
							modifier = wall_of_bone_modifier
							years = wall_of_bone_years_duration
						}
						# province_modifier = {
						# 	defender_holding_advantage = normal_building_advantage_tier_8
						# 	fort_level = normal_building_fort_level_tier_8
						# 	supply_limit = 600
						# }
						# refill_levy = yes
						# refill_garrison = yes
					}
				}
			}
		}
	}
}

# Raise Undead Platoon (spell)
raise_undead_platoon_spell = {
	category = interaction_category_warlock
	desc = raise_undead_platoon_spell_interaction_desc
	send_name = raise_undead_platoon_spell_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = raise_zombie_titans_perk
		}
		scope:recipient = {
			is_ruler = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_2_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			text = helpful_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_2_spell_cost_value
			}
		}
		scope:recipient = {
			if = {
				limit = {
					NOT = {
						this = scope:actor
					}
				}
				add_opinion = {
					modifier = gave_undead_troops_opinion_modifier
					target = scope:actor
				}
			}
		}

		scope:recipient = {
			spawn_army = {
				uses_supply = no
				inheritable = no
				name = undead_platoon_fighters
				# levies = {
				# 	value = {
				# 		value = scope:recipient.max_military_strength
				# 		multiply = 2
				# 	}
				# }
				men_at_arms = {
					type = death_knights
					stacks = 2
				}
				men_at_arms = {
					type = skeletal_berzerkers
					stacks = 2
				}
				men_at_arms = {
					type = dread_cavalry
					stacks = 2
				}
				location = scope:recipient.capital_province
			}
		}
		scope:recipient = {
			spawn_army = {
				uses_supply = no
				inheritable = no
				name = undead_platoon_siegers
				men_at_arms = {
					type = zombie_titans
					stacks = 1
				}
				men_at_arms = {
					type = undead_rammers
					stacks = 1
				}
				men_at_arms = {
					type = acid_belchers
					stacks = 1
				}
				location = scope:recipient.capital_province
			}
		}
		scope:recipient = {
			spawn_army = {
				uses_supply = no
				inheritable = no
				name = undead_platoon_casters
				men_at_arms = {
					type = skeletal_black_mages
					stacks = 4
				}
				men_at_arms = {
					type = skeletal_grey_mages
					stacks = 2
				}
				location = scope:recipient.capital_province
			}
		}
	}
}

# send_option = {										# Adds an option
# is_shown = trigger								# Is option shown
# is_valid = trigger								# Is option selectable
# current_description = desc						# Tooltip
# flag = flag_name								# If selected then scope:flag_name will be set to yes
# localization = loc_key							# Loc_key for option label
# starts_enabled = trigger						# Trigger for whether this should be on when the window opens. If not defined, defaults to off
# can_be_changed = trigger						# Trigger for whether this option can be changed from its default
# can_invalidate_interaction = bool				# If yes then when the AI picks an interaction it will do the full can send this entire interaction check instead of the more performance saving checking of recipient refusal and ai will do, use with care and profile it
# }



# Mind Tree

skin_tailor_spell = {
	category = interaction_category_warlock
	desc = skin_tailor_spell_interaction_desc
	send_name = skin_tailor_spell_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = skin_tailor_perk
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
		scope:recipient = {
			OR = {
				NOT = {
					has_trait = warlock
				}
				this = scope:actor
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			OR = {
				NOT = {
					has_trait = warlock
				}
				this = scope:actor
			}
		}

		scope:actor = {
			piety >= scope:recipient.skin_tailor_minimum_spell_cost
		}
	}

	auto_accept = {
		custom_description = {
			text = helpful_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:recipient = {
			if = {
				limit = {
					has_trait = scaly
				}
				remove_trait = scaly
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_4_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = disfigured
				}
				remove_trait = disfigured
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_7_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = dwarf
				}
				remove_trait = dwarf
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_5_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = inbred
				}
				remove_trait = inbred
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_6_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = one_legged
				}
				remove_trait = one_legged
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_8_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = clubfooted
				}
				remove_trait = clubfooted
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_2_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = hunchbacked
				}
				remove_trait = hunchbacked
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_3_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = weak
				}
				remove_trait = weak
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_2_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = spindly
				}
				remove_trait = spindly
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_3_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = physique_bad_3
				}
				remove_trait = physique_bad_3
				add_trait = physique_bad_2
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_4_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = physique_bad_2
				}
				remove_trait = physique_bad_2
				add_trait = physique_bad_1
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_4_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = physique_bad_1
				}
				remove_trait = physique_bad_1
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_4_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					NOT = {
						has_trait = eldritch_beauty_01
					}
				}
				add_trait = eldritch_beauty_01
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_1_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					NOT = {
						has_trait = eldritch_strength_01
					}
				}
				add_trait = eldritch_strength_01
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_1_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = scarred
				}
				remove_trait = scarred
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_2_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = one_eyed
				}
				remove_trait = one_eyed
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_6_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = albino
				}
				remove_trait = albino
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_3_spell_cost_value
					}
				}
			}
			else_if = {
				limit = {
					has_trait = giant
				}
				remove_trait = giant
				scope:actor = {
					add_piety = {
						value = 0
						subtract = level_5_spell_cost_value
					}
				}
			}
		}
	}
}

mass_suggestion_spell = {
	category = interaction_category_warlock
	desc = mass_suggestion_spell_interaction_desc
	send_name = mass_suggestion_spell_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = mass_suggestion_perk
		}
		# scope:recipient = {
		# 	is_ruler = yes
		# }
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_4_spell_cost_value
		scope:recipient = {
			is_ruler = yes
		}
	}

	auto_accept = {
		custom_description = {
			text = stealthy_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_4_spell_cost_value
			}
		}
		scope:recipient = {
			every_courtier_or_guest = {
				add_to_list = courtiers_to_geas
			}
		}
		every_in_list = {
			list = courtiers_to_geas
			save_scope_as = current_courtier
			scope:actor = {
				add_hook = {
					target = scope:current_courtier
					type = geas_hook
				}
			}
			add_opinion = {
				modifier = geased_opinion_modifier
				target = scope:actor
			}
		}
	}
}

psychic_armaments_spell = {
	category = interaction_category_warlock
	desc = psychic_armaments_spell_interaction_desc
	send_name = psychic_armaments_spell_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = psychic_armaments_perk
		}
		scope:recipient = {
			is_ruler = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_2_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			text = helpful_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_2_spell_cost_value
			}
		}
		scope:recipient = {
			add_character_modifier = {
				modifier = psychic_armaments_modifier
				years = 3
			}
			if = {
				limit = {
					NOT = {
						this = scope:actor
					}
				}
				add_opinion = {
					modifier = cast_psychic_armaments_opinion_modifier
					target = scope:actor
				}
			}
		}
	}
}

# RITUAL (SCHEME) version
create_thrall = {
	category = interaction_category_warlock
	common_interaction = yes
	scheme = create_thrall_scheme
	use_diplomatic_range = yes
	ignores_pending_interaction_block = yes
	auto_accept = yes
	ai_will_do = 0

	is_shown = {
		scope:actor = {
			AND = {
				has_trait = warlock
				has_perk = create_puppet_perk
			}
		}
		scope:recipient = {
			is_adult = yes
			NOT = { scope:recipient = scope:actor }
			NOT = {
				has_trait = undead
				has_trait = deathknight
				has_trait = warlock
			}
			NOT = {
				has_character_flag = is_thrall_flag
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			can_start_scheme = {
				type = create_thrall
				target = scope:recipient
			}
		}
	}

	on_accept = {
		hidden_effect = {
			scope:actor = {
				start_scheme = {
					type = create_thrall_scheme
					target = scope:recipient
				}
			}
		}
	}
}

# later on make this cost 0 piety and call it debug_create_thrall
debug_create_thrall = {
	category = interaction_category_warlock
	desc = debug_create_thrall_interaction_desc
	send_name = debug_create_thrall_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = create_puppet_perk
		}
		scope:recipient = {
			NOT = {
				this = scope:actor
				has_trait = warlock
				# has_opinion_modifier = {
				# 	modifier = thrall_opinion_modifier
				# 	target = scope:actor
				# }
				has_character_flag = is_thrall_flag
			}
			is_alive = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	# is_valid_showing_failures_only = {
	# 	scope:actor.piety >= level_3_spell_cost_value
	# }

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			text = stealthy_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}

	on_accept = {
		scope:actor = {
			# add_piety = {
			# 	value = 0
			# 	subtract = level_3_spell_cost_value
			# }
			add_character_modifier = { modifier = maintaining_thralls_modifier }
		}

		scope:recipient = {
			if = {
				limit = {
					is_a_faction_member = yes
				}
				leave_faction_with_cooldown_effect = {
					FACTION = scope:faction
					YEARS = 20
				}
			}
			if = {
				limit = {
					is_a_faction_leader = yes
				}
				joined_faction = {
					destroy_faction = yes
				}
			}
		}
		hidden_effect = {
			scope:recipient = {
				add_character_flag = { flag = joining_faction_block }
				add_opinion = {
					modifier = thrall_opinion_modifier
					target = scope:actor
				}
				add_character_flag = { flag = is_thrall_flag }
				add_character_modifier = { modifier = dulled_sense_of_self }
				# set_variable = {
				# 	name = warlock_master
				# 	value = scope:actor
				# }
				set_variable = {
					name = warlock_master
					value = scope:actor
				}
				# add_to_list = warlock_thralls
			}
		}
	}
}

release_thrall_interaction = {
	category = interaction_category_warlock
	desc = release_thrall_spell_interaction_desc
	send_name = release_thrall_spell_interaction
	use_diplomatic_range = no
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes
	is_shown = {
		scope:actor = {
			# dont need to be a warlock, in case player quits warlockdom.
			# has_trait = warlock

			# dont need the perk to remove thrall. in case player resets perks
			# has_perk = create_puppet_perk
		}
		scope:recipient = {
			has_opinion_modifier = {
				modifier = thrall_opinion_modifier
				target = scope:actor
			}
			has_character_flag = is_thrall_flag
			is_alive = yes
		}
	}

	# is_valid = {
	# 	scope:actor = {
	# 		NOT = { is_imprisoned = yes}
	# 	}
	# }

	auto_accept = {
		custom_description = {
			text = thralls_must_obey_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:recipient = {
			remove_opinion = {
				modifier = thrall_opinion_modifier
				target = scope:actor
			}
			remove_character_modifier = dulled_sense_of_self
			remove_character_flag = is_thrall_flag
			remove_variable = warlock_master
			remove_character_flag = joining_faction_block
			if = {
				limit = { has_character_modifier = tithed_thrall_modifier}
				remove_character_modifier = tithed_thrall_modifier
				remove_character_flag = being_tithed_flag
				scope:actor = {
					remove_character_modifier = receiving_thrall_tithe_modifier
				}
			}
		}
		scope:actor = {
			remove_character_modifier = maintaining_thralls_modifier
		}
	}
}

dominate_thrall_interaction = {
	category = interaction_category_warlock
	desc = dominate_thrall_interaction_desc
	send_name = dominate_thrall_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = dominate_puppet_perk
		}
		scope:recipient = {
			has_opinion_modifier = {
				target = scope:actor
				modifier = thrall_opinion_modifier
			}
		}

	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_1_spell_cost_value
	}

	auto_accept = {
		custom_description = {
			text = thralls_must_obey_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_1_spell_cost_value
			}
			hidden_effect = {
				if = {
					limit = {
						has_hook = scope:recipient
					}
					remove_hook = {
						target = scope:recipient
						type = dominate_thrall_hook
					}
				}
			}
			add_hook = {
				target = scope:recipient
				type = dominate_thrall_hook
			}
		}
	}
}

convert_thrall_interaction = {
	category = interaction_category_warlock
	desc = convert_thrall_interaction_desc
	send_name = convert_thrall_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = create_puppet_perk
		}
		scope:recipient = {
			NOT = {
				faith = faith:great_old_one
			}
			# this checks that they are your thrall
			has_opinion_modifier = {
				target = scope:actor
				modifier = thrall_opinion_modifier
			}
		}
	}

	auto_accept = {
		custom_description = {
			text = thralls_must_obey_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:recipient = {
			# sets faith directly
			# set_character_faith = faith:great_old_one

			# converts faith, along with family and vassals potentially
			set_character_faith_with_conversion = faith:great_old_one
		}
	}
}

tithe_thrall_interaction = {
	category = interaction_category_warlock
	desc = tithe_thrall_interaction_desc
	send_name = tithe_thrall_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
			# change to extort_puppet_perk later
			has_perk = tithe_puppet_perk
		}
		scope:recipient = {
			# this checks that they are your thrall
			has_opinion_modifier = {
				target = scope:actor
				modifier = thrall_opinion_modifier
			}
			NOT = {
				has_character_modifier = tithed_thrall_modifier
			}
		}
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			text = thralls_must_obey_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}

	on_accept = {
		scope:actor = {
			add_character_modifier = {
				modifier = receiving_thrall_tithe_modifier
			}
		}
		scope:recipient = {
			add_character_modifier = {
				modifier = tithed_thrall_modifier
			}
			add_character_flag = being_tithed_flag
		}
	}
}

stop_tithing_thrall_interaction = {
	category = interaction_category_warlock
	desc = tithe_thrall_interaction_desc
	send_name = tithe_thrall_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		# scope:actor = {
		# 	# should be able to stop getting tithes even if stopped being warlock
		# 	# has_trait = warlock

		# 	# should be able to stop getting tithes even if lost skill points through respeccing
		# 	# has_perk = create_puppet_perk
		# 	# has_character_modifier = receiving_thrall_tithe_modifier
		# }
		scope:recipient = {
			# this checks that they are your thrall
			has_opinion_modifier = {
				target = scope:actor
				modifier = thrall_opinion_modifier
			}
			has_character_modifier = tithed_thrall_modifier
		}
	}

	auto_accept = {
		custom_description = {
			text = thralls_must_obey_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:actor = {
			remove_character_modifier = receiving_thrall_tithe_modifier
		}
		scope:recipient = {
			remove_character_modifier = tithed_thrall_modifier
			remove_character_flag = being_tithed_flag
		}
	}
}

summon_thrall_to_war = {
	category = interaction_category_diplomacy
	desc = call_ally_interaction_desc
	interface_priority = 60
	interface = call_ally
	special_interaction = call_ally_interaction
	popup_on_receive = yes
	pause_on_receive = yes

	greeting = positive
	notification_text = CALL_ALLY_NOTIFICATION

	is_shown = {
		scope:actor = {
			is_at_war = yes
			has_trait = warlock
			# we want the player to see that they could call them if they got the perk
			# has_perk = weaponize_puppet_perk
			has_perk = create_puppet_perk
		}

		scope:recipient = {
			# this checks that they are your thrall
			has_opinion_modifier = {
				target = scope:actor
				modifier = thrall_opinion_modifier
			}
		}

		# dont need to be allied to a thrall to summon them to war
		# scope:recipient = {
		# 	is_allied_to = scope:actor
		# }
		# scope:actor = { #If you can call them as a House Member then do that
		# 	NOT = {
		# 		is_character_interaction_valid = {
		# 			recipient = scope:recipient
		# 			interaction = call_house_member_to_war_interaction
		# 		}
		# 	}
		# }
	}
	
	has_valid_target = {
		exists = scope:target
	}	

	has_valid_target_showing_failures_only = {
		# scope:target = {
		# 	is_war_leader = scope:actor
		# }

		joiner_not_already_in_another_war_with_any_target_war_participants_trigger = {
			WARRIOR = scope:actor
			JOINER = scope:recipient
		}
	}

	
	is_valid_showing_failures_only = {
		
		scope:actor = {
			has_perk = weaponize_puppet_perk
		}
		scope:recipient = {
			is_ruler = yes
		}

		# Only War Leaders can call allies
		# scope:actor = {
		# 	custom_description = {
		# 		text = must_be_war_leader
		# 		any_character_war = {
		# 			is_war_leader = scope:actor
		# 		}
		# 	}
		# }

		# Cannot call the same character multiple times
		scope:actor = {
			custom_description = {
				text = cannot_call_same_character_multiple_times
				subject = scope:recipient
				any_character_war = {
					ALL_FALSE = {
						was_called = scope:recipient
						is_participant = scope:recipient
					}
				}
			}
		}

		# this makes it so vassals can't call lieges to war and lieges can't call vassals to war
		# can_potentially_call_ally_trigger = {
		# 	WARRIOR = scope:actor
		# 	JOINER = scope:recipient
		# }

		# Cannot call a character of the "wrong" religion to a Great Holy War
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { faith = scope:recipient.faith }
				}
				custom_description = {
					text = is_of_wrong_faith_for_holy_war
					subject = scope:actor
					object = scope:recipient
					any_character_war = {
						NOR = {
							using_cb = undirected_great_holy_war
							using_cb = directed_great_holy_war
						}
					}
				}
			}
		}
	}

	can_be_picked = {

		# what does this do?
		# can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:actor JOINER = scope:recipient }

		scope:target = {
			# is_war_leader = scope:actor

			# not already in target war
			custom_description = {
				text = join_war_interaction_already_in_target_war
				NOR = {
					any_war_attacker = { this = scope:recipient }
					any_war_defender = { this = scope:recipient }
				}
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = call_ally.0001
		}
	}
		
	on_accept = {
		call_ally_interaction_effect = yes

		save_scope_value_as = {
			name = call_ally_interaction
			value = yes
		}

		scope:actor = {
			hidden_effect = { #To nudge friendship
				if = {
					limit = {
						NOR = {
							has_relation_friend = scope:recipient
							has_relation_potential_friend = scope:recipient
						}
					}
					set_relation_potential_friend = scope:recipient
				}
			}
			trigger_event = call_ally.0100
		}
	}
	
	on_decline = {
		#The war could theoretically end on the day the decline is sent
		if = {
			limit = {
				exists = scope:target
			}
			scope:target = {
				if = {
					limit = {
						is_attacker = scope:actor
					}
					scope:actor = {
						add_opinion = {
							modifier = rejected_call_to_offensive_war
							target = scope:recipient
						}
					}
					scope:recipient = {
						add_prestige_experience = major_prestige_loss
					}
				}
				else = {
					scope:actor = {
						add_opinion = {
							modifier = rejected_call_to_defensive_war
							target = scope:recipient
						}
					}
					scope:recipient = {
						add_prestige_experience = massive_prestige_loss
					}
				}
				hidden_effect = {
					if = {
						limit = {
							NOT = { was_called = scope:recipient }
						}
						set_called_to = scope:recipient
					}
				}
			}
			scope:actor = {
				trigger_event = call_ally.0101
			}
		}
	}

	auto_accept = {
		OR = {
			# Always accept a call from a Spouse
			custom_description = {
				text = "recipient_is_spouse"
				subject = scope:actor
				object = scope:recipient
				scope:recipient = {
					is_spouse_of = scope:actor
					is_ai = yes
				}
			}
			# Always accept a call from the Heir
			custom_description = {
				text = "is_recipients_player_heir"
				subject = scope:actor
				object = scope:recipient
				
				exists = scope:recipient.player_heir
				scope:recipient = {
					player_heir = scope:actor
					is_close_or_extended_family_of = scope:actor # Only for family
					is_ai = yes
				}
			}
			# Always accept a call from the one you are heir of
			custom_description = {
				text = "is_player_heir"
				subject = scope:recipient
				object = scope:actor

				exists = scope:actor.player_heir
				scope:actor.player_heir = scope:recipient
				scope:actor = { # Shouldn't be able to force your liege to join just because you've not got any family...
					is_close_or_extended_family_of = scope:recipient
				}
				scope:recipient = {
					is_ai = yes
				}
			}
		}
	}
	
	ai_accept = {
		base = 2000

		# opinion_modifier = { # Opinion Factor
		# who = scope:recipient
		# opinion_target = scope:actor
		# multiplier = 1.0
		# desc = AI_OPINION_REASON
		# }
	}

	# Score above 0 means the AI will call this ally. Note that DESIRED_WAR_SIDE_STRENGTH still applies and can prevent calling the ally
	ai_will_do = {
		# base = 100
		base = 0
	}
}

summon_minion_to_war = {
	category = interaction_category_diplomacy
	desc = call_ally_interaction_desc
	interface_priority = 60
	interface = call_ally
	special_interaction = call_ally_interaction
	popup_on_receive = yes
	pause_on_receive = yes

	greeting = positive
	notification_text = CALL_ALLY_NOTIFICATION

	is_shown = {
		scope:actor = {
			is_at_war = yes
			has_trait = warlock
			has_perk = create_deathknight_perk
		}

		scope:recipient = {
			# this checks that they are your thrall
			has_opinion_modifier = {
				target = scope:actor
				modifier = undead_minion_opinion_modifier
			}
		}

		# dont need to be allied to a thrall to summon them to war
		# scope:recipient = {
		# 	is_allied_to = scope:actor
		# }
	}
	
	has_valid_target = {
		exists = scope:target
	}	

	has_valid_target_showing_failures_only = {
		# scope:target = {
		# 	is_war_leader = scope:actor
		# }

		# joiner_not_already_in_another_war_with_any_target_war_participants_trigger = {
		# 	WARRIOR = scope:actor
		# 	JOINER = scope:recipient
		# }
	}

	
	is_valid_showing_failures_only = {
		
		scope:recipient = {
			is_ruler = yes
		}

		# NOPE: A minion is merely an extension of their master. Any war the master is in the minion can join
		# Only War Leaders can call allies
		# scope:actor = {
		# 	custom_description = {
		# 		text = must_be_war_leader
		# 		any_character_war = {
		# 			is_war_leader = scope:actor
		# 		}
		# 	}
		# }

		# Cannot call the same character multiple times
		scope:actor = {
			custom_description = {
				text = cannot_call_same_character_multiple_times
				subject = scope:recipient
				any_character_war = {
					ALL_FALSE = {
						was_called = scope:recipient
						is_participant = scope:recipient
					}
				}
			}
		}

		# this makes it so vassals can't call lieges to war and lieges can't call vassals to war
		# can_potentially_call_ally_trigger = {
		# 	WARRIOR = scope:actor
		# 	JOINER = scope:recipient
		# }

	}

	can_be_picked = {

		# what does this do?
		# can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:actor JOINER = scope:recipient }

		# If a minion somehow is called into a war against the master, 1 flick of the wrist solves that quick
		# scope:target = {
		# 	is_war_leader = scope:actor

		# 	# not already in target war
		# 	custom_description = {
		# 		text = join_war_interaction_already_in_target_war
		# 		NOR = {
		# 			any_war_attacker = { this = scope:recipient }
		# 			any_war_defender = { this = scope:recipient }
		# 		}
		# 	}
		# }
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = call_ally.0001
		}
	}
		
	on_accept = {
		call_ally_interaction_effect = yes

		save_scope_value_as = {
			name = call_ally_interaction
			value = yes
		}

		scope:actor = {
			hidden_effect = { #To nudge friendship
				if = {
					limit = {
						NOR = {
							has_relation_friend = scope:recipient
							has_relation_potential_friend = scope:recipient
						}
					}
					set_relation_potential_friend = scope:recipient
				}
			}
			trigger_event = call_ally.0100
		}
	}
	
	on_decline = {
		#The war could theoretically end on the day the decline is sent
		if = {
			limit = {
				exists = scope:target
			}
			scope:target = {
				if = {
					limit = {
						is_attacker = scope:actor
					}
					scope:actor = {
						add_opinion = {
							modifier = rejected_call_to_offensive_war
							target = scope:recipient
						}
					}
					scope:recipient = {
						add_prestige_experience = major_prestige_loss
					}
				}
				else = {
					scope:actor = {
						add_opinion = {
							modifier = rejected_call_to_defensive_war
							target = scope:recipient
						}
					}
					scope:recipient = {
						add_prestige_experience = massive_prestige_loss
					}
				}
				hidden_effect = {
					if = {
						limit = {
							NOT = { was_called = scope:recipient }
						}
						set_called_to = scope:recipient
					}
				}
			}
			scope:actor = {
				trigger_event = call_ally.0101
			}
		}
	}

	auto_accept = {
		OR = {
			# Always accept a call from a Spouse
			custom_description = {
				text = "recipient_is_spouse"
				subject = scope:actor
				object = scope:recipient
				scope:recipient = {
					is_spouse_of = scope:actor
					is_ai = yes
				}
			}
			# Always accept a call from the Heir
			custom_description = {
				text = "is_recipients_player_heir"
				subject = scope:actor
				object = scope:recipient
				
				exists = scope:recipient.player_heir
				scope:recipient = {
					player_heir = scope:actor
					is_close_or_extended_family_of = scope:actor # Only for family
					is_ai = yes
				}
			}
			# Always accept a call from the one you are heir of
			custom_description = {
				text = "is_player_heir"
				subject = scope:recipient
				object = scope:actor

				exists = scope:actor.player_heir
				scope:actor.player_heir = scope:recipient
				scope:actor = { # Shouldn't be able to force your liege to join just because you've not got any family...
					is_close_or_extended_family_of = scope:recipient
				}
				scope:recipient = {
					is_ai = yes
				}
			}
		}
	}
	
	ai_accept = {
		base = 2000

		# opinion_modifier = { # Opinion Factor
		# 	who = scope:recipient
		# 	opinion_target = scope:actor
		# 	multiplier = 1.0
		# 	desc = AI_OPINION_REASON
		# }
	}

	# Score above 0 means the AI will call this ally. Note that DESIRED_WAR_SIDE_STRENGTH still applies and can prevent calling the ally
	ai_will_do = {
		# base = 100
		base = 0
	}
}

debug_gain_warlock_xp = {
	category = interaction_category_warlock
	desc = debug_gain_warlock_xp_desc
	send_name = debug_gain_warlock_xp_interaction
	use_diplomatic_range = no
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
		}
		scope:recipient = {
			AND = { this = scope:actor }
			is_alive = yes
			is_ruler = yes
		}
	}

	auto_accept = {
		custom_description = {
			# text = auto_accept_interaction_ai
			text = debug_gain_warlock_xp_auto_accept_interaction
			object = scope:recipient
			# scope:recipient = {
			# 	is_ai = yes
			# }
		}
	}

	on_accept = {
		scope:recipient = {
			add_warlock_lifestyle_xp = monumental_lifestyle_xp
		}
	}
}

create_undead_minion = {
	category = interaction_category_warlock
	common_interaction = yes
	scheme = create_undead_minion_scheme
	use_diplomatic_range = yes
	ignores_pending_interaction_block = yes
	auto_accept = yes
	ai_will_do = 0

	is_shown = {
		scope:actor = {
			AND = {
				has_trait = warlock
				has_perk = create_deathknight_perk
			}
		}
		scope:recipient = {
			is_adult = yes
			NOT = { scope:recipient = scope:actor }
			NOT = {
				has_trait = undead
				has_trait = deathknight
				has_trait = overlord
				has_trait = warlock
				has_character_flag = is_thrall_flag
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			can_start_scheme = {
				type = create_undead_minion_scheme
				target = scope:recipient
			}
		}
	}

	on_accept = {
		hidden_effect = {
			scope:actor = {
				start_scheme = {
					type = create_undead_minion_scheme
					target = scope:recipient
				}
			}
		}
	}
}

cast_debloom = {
	category = interaction_category_warlock
	desc = cast_debloom_interaction_desc
	send_name = cast_debloom_interaction
	use_diplomatic_range = yes
	popup_on_receive = no
	send_options_exclusive = no
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_trait = warlock
			has_perk = debloom_perk
		}
		scope:recipient = {
			# Can give self abortion
			# NOT = { this = scope:actor }
			is_alive = yes
			is_pregnant = yes
		}
	}

	is_valid = {
		scope:actor = {
			NOT = { is_imprisoned = yes}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor.piety >= level_1_spell_cost_value
		# scope:actor.piety >= 5
	}

	auto_accept = {
		custom_description = {
			text = stealthy_auto_accept_interaction
			object = scope:recipient
		}
	}

	on_accept = {
		scope:actor = {
			add_piety = {
				value = 0
				subtract = level_1_spell_cost_value
			}
			hidden_effect = {
				random_list = {
					# Get 1 extra year of life
					50 = {
						add_character_modifier = {
							modifier = stolen_life_force
						}
					}
					# Nothing happens
					50 = {}
				}
			}
		}
		# Vanilla Miscarriage Event
		scope:recipient = { trigger_event = birth.3001 }

		# This stresses the mother out
		scope:recipient = {
			hidden_effect = {
				add_character_modifier = {
					modifier = debloomed_modifier
					years = 5
				}
				stress_impact = {
					base = medium_stress_impact_gain
					humble = major_stress_impact_gain
					compassionate = major_stress_impact_gain
					stubborn = major_stress_impact_gain
					just = major_stress_impact_gain
					paranoid = major_stress_impact_gain
				}
			}
		}
	}
}

		# # move into own interaction
		# scope:recipient = {
		# 	if = {
		# 		limit = { is_ruler = yes}
		# 		every_realm_province = {
		# 			add_province_modifier = {
		# 				modifier = hostile_mists_modifier
		# 				years = 5
		# 			}
		# 			# province_modifier = {
		# 			# 	defender_holding_advantage = normal_building_advantage_tier_8
		# 			# 	fort_level = normal_building_fort_level_tier_8
		# 			# 	supply_limit = 600
		# 			# }
		# 			# refill_levy = yes
		# 			# refill_garrison = yes
		# 		}
		# 		# every_sub_realm_county = {
		# 			# add_county_modifier = {
		# 			# 	modifier = undead_wreckage_modifier
		# 			# 	years = 20
		# 			# }
		# 		# }
		# 	}
		# }

# if = {
# 	limit = {
# 		scope:treatment_result_treatment = flag:safe
# 		scope:treatment_result_outcome = flag:success
# 	}
# 	if = {
# 		limit = {
# 			has_short_disease_type_trigger = yes
# 			has_high_health_penalty_disease_type_trigger = yes
# 		}
# 		add_character_modifier = { modifier = safe_disease_treatment_success_high_modifier days = disease_treatment_short_duration }
# 	}
# 	else_if = {
# 		limit = {
# 			has_short_disease_type_trigger = no
# 			has_high_health_penalty_disease_type_trigger = yes
# 		}
# 		add_character_modifier = { modifier = safe_disease_treatment_success_high_modifier days = disease_treatment_long_duration }
# 	}
# 	else_if = {
# 		limit = {
# 			has_short_disease_type_trigger = yes
# 			has_high_health_penalty_disease_type_trigger = no
# 		}
# 		add_character_modifier = { modifier = safe_disease_treatment_success_low_modifier days = disease_treatment_short_duration }
# 	}
# 	else_if = {
# 		limit = {
# 			has_short_disease_type_trigger = no
# 			has_high_health_penalty_disease_type_trigger = no
# 		}
# 		add_character_modifier = { modifier = safe_disease_treatment_success_low_modifier days = disease_treatment_long_duration }
# 	}

# give_bubonic_plague_interaction = {
# 	category = interaction_debug_main
# 	use_diplomatic_range = no
# 	ignores_pending_interaction_block = yes
	
# 	interface_priority = -1

# 	is_shown = {
# 		debug_only = yes
# 	}

# 	on_accept = {
# 		scope:recipient = {
# 			add_trait = bubonic_plague
# 		}
# 	}
# 	auto_accept = yes
# }

# add_character_modifier = { modifier = risky_wound_treatment_failure_modifier days = wound_treatment_failure_duration }

# sacrifice_to_the_darkness_interaction = {
# 	category = interaction_category_hostile
# 	desc = sacrifice_to_the_darkness_interaction_desc
# 	send_name = sacrifice_to_the_darkness_interaction
# 	use_diplomatic_range = yes
# 	popup_on_receive = no
# 	send_options_exclusive = no
# 	ai_min_reply_days = 4
# 	ai_max_reply_days = 9

# 	is_shown = {
# 		#scope:recipient.location = { squared_distance = { target = scope:actor.location value <= 4000 } }
# 		scope:actor = {
# 			has_trait = a_touch_of_power_diabolist
# 			is_at_same_location = scope:recipient
# 		}
# 		scope:recipient = { 
# 			NOT = { this = scope:actor }
# 			is_alive = yes
# 		}
# 	}
	
# 	is_valid = {
# 		scope:actor = {
# 			NOT = { is_imprisoned = yes }
# 		}
# 	}

# 	auto_accept = { always = yes }
# 	cooldown = { months = 1 }
# 	cooldown_against_recipient = { years = 1 }

# 	on_send = {
# 		scope:actor = {
# 			trigger_event = diabolist_event.1000
# 		}
# 	}

# 	#Use hook
# 	send_option = {
# 		is_valid = {
# 			scope:actor = {
# 				has_usable_hook = scope:recipient
# 			}
# 		}
# 		flag = hook	
# 		localization = GENERIC_SPEND_A_HOOK
# 	}
# 	should_use_extra_icon = {
# 		scope:actor = { has_usable_hook = scope:recipient }
# 	}
# 	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

# 	on_accept = {
# 		scope:actor = {
# 			custom_tooltip = diabolist_event.1000.sacrifice_attempt
# 			trigger_event = diabolist_event.1010
# 		}
# 	}

# 	on_decline = {
# 	}

# 	auto_accept = {
# 		custom_description = {
# 			text = "spending_hook"
# 			subject = scope:actor
# 			object = scope:recipient
# 			scope:hook = yes
# 		}
# 	}

# 	ai_accept = {
# 		base = 100
# 	}

# 	ai_potential = {
# 		is_at_war = no
# 		is_ruler = yes
# 	}

# 	ai_targets = {
# 		ai_recipients = prisoners
# 		max = 20
# 	}

# 	ai_targets = {
# 		ai_recipients = courtiers
# 		max = 20
# 	}
	
# 	ai_targets = {
# 		ai_recipients = dynasty
# 		max = 20
# 	}
	
# 	ai_targets = {
# 		ai_recipients = family
# 		max = 10
# 	}
	
# 	ai_targets = {
# 		ai_recipients = spouses
# 	}
	
# 	ai_frequency = 12
	
# 	ai_will_do = {
# 		base = 100
# 	}
# }