revoke_minion_title_interaction = {

	category = interaction_category_vassal
	common_interaction = yes
	highlighted_reason = HIGHLIGHTED_HAS_REVOKE_TITLE_REASON
	notification_text = REVOKE_TITLE_PROPOSAL

	desc = revoke_title_interaction_desc

	special_interaction = revoke_title_interaction
	interface = revoke_title
	target_type = title
	target_filter = recipient_domain_titles
	ai_maybe = yes
	can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes

	interface_priority = 60
	ai_min_reply_days = 1
	ai_max_reply_days = 2

	# on_decline_summary = general_rebellion_decline_summary

	# actor character giving the titles
	# recipient character receiving the titles

	is_shown = {
		scope:actor = {
			has_trait = warlock
		}
		scope:recipient = {
			is_landed = yes
			# should be shown but be disabled for indirect vassals
			target_is_liege_or_above = scope:actor
			# has_trait = deathknight
			has_opinion_modifier = {
				target = scope:actor
				modifier = undead_minion_opinion_modifier
			}
		}

		trigger_if = {
			limit = {
				scope:actor = {
					is_ai = yes
				}
				# No point revoking barons at this time
				scope:recipient.primary_title.tier >= tier_county
			}
		}
	}
	
	is_valid_showing_failures_only = {
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
		scope:actor = {
			# custom_description = {
			# 	text = "character_interactions_revoke_title_from_ally_without_reason"
			# 	object = scope:recipient
			# 	OR = {
			# 		NOT = {
			# 			is_allied_to = scope:recipient
			# 		}
			# 		has_revoke_title_reason = scope:recipient
			# 	}
			# }
			trigger_if = {
				limit = { has_government = tribal_government }
				custom_description = {
					text = "has_law_allowing_title_revocation_tribal"
					has_realm_law_flag = title_revocation_allowed
				}
			}
			trigger_if = {
				limit = {
					NOT = { has_government = tribal_government }
				}
				custom_description = {
					text = "has_law_allowing_title_revocation_crown"
					has_realm_law_flag = title_revocation_allowed
				}
			}
			# trigger_if = {
			# 	limit = {
			# 		scope:recipient = {
			# 			vassal_contract_has_flag = vassal_contract_cannot_revoke_titles
			# 		}
			# 	}
			# 	custom_description = {
			# 		text = vassal_contract_forbids_revocation
			# 		scope:recipient = {
			# 			NOT = { vassal_contract_has_flag = vassal_contract_cannot_revoke_titles }
			# 		}
			# 	}
			# }
		}
		scope:recipient = {
			is_vassal_or_below_of = scope:actor
			is_diplomatically_available = yes
			# NOT = { has_strong_hook = scope:actor }
		}
	}

	can_send = {
		# scope:actor = {
		# 	custom_description = {
		# 		text = "character_interactions_hostile_actions_disabled_delay"
		# 		NOT = { has_character_flag = flag_hostile_actions_disabled_delay }
		# 	}
		# }
	}
	
	# Highlighted in the interaction menu when right-clicking a character
	is_highlighted = {
		OR = {
			scope:actor = {
				has_revoke_title_reason = scope:recipient
			}
			scope:recipient = {
			 	any_held_title = {
					scope:actor = {
						has_claim_on = prev
					}
				}
				NOT = {
					any_ally = {
						this = scope:actor
					}
				}
			}
		}
	}
		
	can_be_picked_title = {
		scope:target = {
			is_contested = no
			# NOT = {
			# 	recent_history = {
			# 		type = granted
			# 		years = 1
			# 	}
			# }
			custom_description = {
				text = "character_interactions_not_rel_head_title"
				NOT = { exists = controlled_faith }
			}
		}
	}

	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no

	on_send = {
		scope:actor = {
			add_character_flag = {
				flag = flag_hostile_actions_disabled_delay
				days = 10
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = char_interaction.0200
		}
	}

	on_accept = {
		revoke_minion_title_interaction_effect = yes

		save_scope_value_as = {
			name = revoke_title_interaction
			value = yes
		}
		
		scope:actor = {
			trigger_event = char_interaction.0199
		}

		if = {
			limit = {
				scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}
	}

	on_decline = {
		if = {
			limit = {
				scope:landed_title.tier != tier_barony
			}
			scope:actor = {
				revocation_tyranny_effect = yes
				title_revocation_stress_effect = yes
			}
		}
		# war_for_revoke_effect = yes
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = revoked_title
			}
		}
		if = {
			limit = {
				scope:actor = { has_realm_law_flag = vassal_refusal_is_treason }
			}
			scope:actor = {
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_revoke_refusal
				}
			}
		}
		if = {
			limit = {
				scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}
	}

	auto_accept = {
		has_opinion_modifier = {
			target = scope:actor
			modifier = thrall_opinion_modifier
		}
		# OR = {
		# 	scope:recipient = {
		# 		highest_held_title_tier = tier_barony
		# 	}
		# 	scope:recipient = {
		# 		is_imprisoned_by = scope:actor
		# 	}
		# 	custom_description = {
		# 		text = "spending_hook"
		# 		subject = scope:actor
		# 		object = scope:recipient
		# 		scope:hook = yes
		# 		scope:actor = { has_strong_hook = scope:recipient }
		# 	}
		# }
	}
	ai_accept = {
		base = 2000 # Try to make it 0 for most interactions

		modifier = {
			scope:hook = yes
			add = 40
			desc = SCHEME_WEAK_HOOK_USED
		}

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.8
			desc = AI_OPINION_REASON
		}
		
		modifier = {
			add = 20
			scope:actor = {
				has_realm_law_flag = vassal_refusal_is_treason
			}
			desc = AI_REFUSAL_IS_TREASON
		}
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:landed_title = scope:actor.primary_title.title_capital_county
				scope:landed_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			add = 50
			desc = AI_TITLE_IS_REALM_CAPITAL
		}
		modifier = {
			add = 30
			scope:actor = {
				has_claim_on = scope:landed_title
			}
			desc = AI_LIEGE_HAS_CLAIM_ON_TITLE
		}

		ai_value_modifier = {
			who = scope:recipient
			ai_greed = {
				if = {
					limit = {
						scope:recipient = { NOT = { ai_greed = 0 } }
					}
					value = -0.75
				}
			}
			ai_honor  = {
				if = {
					limit = {
						scope:recipient = { #If AI is honorable and the law compels to obey the liege, AI will be more likely to obey.
							ai_honor > 0
						}
						scope:actor = {
							has_realm_law_flag = vassal_refusal_is_treason
						}
					}
					value = 0.5
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -20
		}
		modifier = { #Title is part of vassal's primary title de-jure.
			add = -25
			OR = {
				scope:recipient.primary_title = {
					is_de_jure_liege_or_above_target = scope:landed_title
				}
				scope:recipient.primary_title = scope:landed_title
			}
			desc = AI_REFUSAL_IS_DE_JURE_UNDER
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = { #Comparative military strength.
			desc = offer_vassalization_interaction_aibehavior_power_tt
	  	  	add = {
				value = 1
					subtract = {
					value = scope:recipient.max_military_strength
					divide = { value = scope:actor.max_military_strength min = 1 }
					}
				multiply = 50
				max = 20
	  		}
		}
	}

	# AI
	ai_targets = {
		ai_recipients = vassals
	}
	ai_frequency = 0 # This is handled via code instead; see REVOKE_TITLE_TICK in the AI defines. All the logic for *if* to send a revoke though is scripted below

	ai_potential = {
		has_realm_law_flag = title_revocation_allowed
		primary_title.tier > tier_county
	}

	ai_will_do = {
		base = -1000

		# We want to avoid tyranny unless we've got a good reason
		# And even if we can avoid tyranny we don't want to revoke just because we can, so this only gets us to -10
		# Certain characters will revoke despite tyranny, if their rationality is sufficiently low
		modifier = {
			scope:actor = {
				OR = {
					NOT = {
						title_revocation_is_tyrannical_trigger = yes
					}
					AND = {
						ai_rationality <= very_high_negative_ai_value
						OR = {
							has_trait = lunatic
							has_trait = possessed
							has_trait = arbitrary
						}
					}
				}
			}

			add = 990
		}
		# Always revoke preferred capital and capital duchy
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:landed_title = scope:actor.primary_title.title_capital_county
				scope:landed_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			NAND = { # Don't revoke player titles tyranically, it must be possible to play and succeed as Ulm!
				scope:landed_title.holder = {
					is_ai = no
				}
				scope:actor = {
					title_revocation_is_tyrannical_trigger = yes
				}
			}
			add = 1000
		}
		# Revoke county we're dejure liege of if below domain limit
		modifier = {
			scope:actor.domain_size < scope:actor.domain_limit
			scope:landed_title.tier = tier_county
			scope:landed_title.de_jure_liege.holder = scope:actor
			add = 500
		}
		# Revoke from vassals of the wrong faith if you can do it without tyranny
		modifier = {
			NOT = { scope:actor.faith = scope:recipient.faith }
			OR = {
				NOT = { scope:actor.faith.religion = scope:recipient.faith.religion }
				scope:actor.ai_zeal >= low_negative_ai_value
				NOT = {
					scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			OR = { # Chill a bit until you've dealth with the ones already in your prison
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
				NOT = {
					any_vassal = {
						NOT = { faith = scope:actor.faith }
						primary_title.tier > tier_barony
						is_imprisoned_by = scope:actor
						time_in_prison < { years = 1 }
					}
				}
			}
			add = 100
		}
		# Revoke from characters you dislike if you can do it without tyranny
		modifier = {
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			add = 100
		}
		# Slight preference for higher-tier titles
		modifier = {
			add = scope:landed_title.tier
		}
		# Do not revoke titles from certain characters
		modifier = {
			scope:actor = {
				OR = {
					has_relation_friend = scope:recipient
					has_relation_best_friend = scope:recipient
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
					is_heir_of = scope:recipient
				}
			}
			add = -2000
		}
		# Do not revoke titles when the chance of success if exceedingly low
		modifier = {
			NOT = {
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
			}
			scope:actor = {
				OR = {
					gold < minimum_ai_gold_value_for_tyranny_wars
					AND = {
						scope:actor.max_military_strength < scope:recipient.max_military_strength
						gold < comfortable_ai_gold_value_for_tyranny_wars
					}
				}
			}
			add = -2000
		}
		
		modifier = { # The AI will only use a Hook if they couldn't otherwise do this
			scope:hook = yes
			add = -1
		}

		modifier = { # The AI shouldn't ruin the player's fun
			add = -2000
			scope:recipient = { has_character_flag = is_party_baron }
		}

		modifier = { # Avoid triggering Tyranny wars mid-war
			factor = 0
			scope:actor = {
				is_at_war = yes
			}
			scope:recipient = {
				NOT = {
					is_imprisoned_by = scope:actor
				}
			}
		}
	}
}

invite_minion_to_court_interaction = {
	category = interaction_category_vassal

	
	desc = invite_to_court_interaction_desc
	
	is_shown = {

		scope:actor = {
			has_trait = warlock
		}
		scope:recipient = {
			# has_trait = deathknight # should be enough just to have undead_minion_opinion_modifier
			has_opinion_modifier = {
				target = scope:actor
				modifier = undead_minion_opinion_modifier
			}
			NOR = {
				is_courtier_of = scope:actor
				# is_foreign_court_guest = yes
				AND = {
					exists = host
					host = scope:actor
				}
				is_ruler = yes
			}
		}
	}


	is_valid_showing_failures_only = {
		scope:recipient = {
			NOR = {
				custom_description = {
					text = is_not_wandering_child
					subject = scope:recipient
					OR = {
						AND = {
							is_adult = no
							is_pool_character = no
						}
						AND = {
							is_adult = no
							NOT = { is_close_or_extended_family_of = scope:actor }
						}
					}
				}
				is_imprisoned = yes
				is_theocratic_lessee = yes
				trigger_if = {
					limit = {
						exists = host
						NOT = { is_player_heir_of = scope:actor }
					}
					is_player_heir_of = host
				}
				trigger_if = {
					limit = { exists = host }
					is_consort_of = host
				}
				trigger_if = {
					limit = { exists = host }
					host = {
						pressing_claim_of_character_trigger = { CHARACTER = scope:recipient }
					}
				}

				#Do they have the "wrong" marriage type and the spouse is employed?
				custom_description = {
					text = is_married_matrilineally_and_spouse_is_dominant_partner
					subject = scope:recipient
					any_spouse = {
						is_female = yes
						matrilinear_marriage = yes
						exists = host
						host = scope:recipient.host
						save_temporary_scope_as = spouse
						OR = { #Is employed in some way
							is_councillor_of = scope:recipient.host
							is_knight_of = scope:recipient.host
							any_relation = {
								type = ward
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = guardian
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = mentor
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = student
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							scope:recipient.host = {
								has_relation_court_physician = scope:spouse
							}
						}
					}
				}
				custom_description = {
					text = is_married_patrilineally_and_spouse_is_dominant_partner
					subject = scope:recipient
					any_spouse = {
						is_male = yes
						patrilinear_marriage = yes
						exists = host
						host = scope:recipient.host
						save_temporary_scope_as = spouse
						OR = { #Is employed in some way
							is_councillor_of = scope:recipient.host
							is_knight_of = scope:recipient.host
							any_relation = {
								type = ward
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = guardian
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = mentor
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							any_relation = {
								type = student
								OR = {
									this = scope:recipient.host
									is_close_family_of = scope:recipient.host
								}
							}
							scope:recipient.host = {
								has_relation_court_physician = scope:spouse
							}
						}
					}
				}
				custom_description = {
					text = "is_escaped_prisoner"
					subject = scope:recipient
					OR = {
						has_opinion_modifier = {
							modifier = attempted_imprisonment_opinion
							target = scope:actor
						}
						has_opinion_modifier = {
							modifier = treasonous_imprison_refusal
							target = scope:actor
						}
						AND = {
							exists = var:escaped_imprisonment_from
							var:escaped_imprisonment_from = scope:actor
						}
					}
				}
			}
		}
	}

	on_accept = {
		hidden_effect = {
			if = {
				limit = {
					exists = scope:recipient.liege
				}
				scope:recipient.liege = {
					send_interface_message = {
						type = event_generic_neutral
						title = msg_courtier_left_court_interaction_title
						
						right_icon = scope:recipient

						show_as_tooltip = {
							remove_courtier_or_guest = scope:recipient
						}
					}
				}
			}
		}
		
		scope:actor = {
			send_interface_message = {
				type = event_generic_neutral
				title = invite_to_court_interaction_notification
				right_icon = scope:recipient

				scope:recipient = {
					every_traveling_family_member = {
						scope:actor = { recruit_courtier = prev }
						hidden_effect = {
							return_to_court = yes
						}
					}
				}

				if = {
					limit = { always = scope:hook }
					scope:actor = {
						use_hook = scope:recipient
					}
				}

				scope:actor = {
					stress_impact = {
						shy = minor_stress_impact_gain
					}
				}
			}
		}
	}

	ai_accept = {
 		base = 2000

 		#Opinions
 		opinion_modifier = {
 			trigger = {
 				exists = liege
 				is_courtier_of = liege
 			}
 			opinion_target = liege
 			multiplier = -0.5
 			step = 5
 			max = 25
 		}
 		opinion_modifier = {
 			opinion_target = scope:actor
 			multiplier = 0.5
 			step = 5
 			max = 25
 		}

 		#Current roles
 		modifier = {
 			is_knight = yes
 			add = -20
 			desc = AI_MY_LIEGES_KNIGHT
 		}
 		modifier = {
 			is_commanding_army = yes
 			add = -30
 			desc = AI_MY_LIEGES_COMMANDER
 		}
 		modifier = {
 			is_councillor = yes
 			add = -40
 			desc = AI_ON_THE_COUNCIL
 		}

 		#Relations & relatives (with actor)
 		modifier = {
 			has_relation_lover = scope:actor
 			add = 100
 			desc = AI_YOUR_LOVER
 		}

 		modifier = {
 			has_relation_friend = scope:actor
 			add = 75
 			desc = AI_YOUR_FRIEND
 		}

 		modifier = {
 			is_child_of = scope:actor
 			add = 160
 			desc = AI_YOUR_CHILD
 		}

 		modifier = {
 			this.dynasty.dynast = scope:actor
 			add = 30
 			desc = AI_YOU_ARE_THE_DYNAST
 		}

 		modifier = {
 			this.house.house_head = scope:actor
 			add = 30
 			desc = AI_YOU_ARE_THE_HOUSE_HEAD
 		}

 		modifier = {
 			NOT = { is_child_of = scope:actor }
 			is_close_family_of = scope:actor
 			add = 75
 			desc = AI_YOUR_RELATIVE
 		}

 		modifier = {
 			is_spouse_of = scope:actor
 			add = 160
 			desc = AI_YOUR_SPOUSE
 		}

 		#Relations & relatives (with host)
 		modifier = {
 			exists = liege
 			has_relation_lover = liege
 			add = -100
 			desc = AI_THEIR_LOVER
 		}

 		modifier = {
 			exists = liege
 			has_relation_friend = liege
 			add = -75
 			desc = AI_THEIR_FRIEND
 		}

 		modifier = {
 			exists = liege
 			is_child_of = liege
 			add = -100
 			desc = AI_THEIR_CHILD
 		}

 		modifier = {
 			exists = liege
 			NOT = { is_child_of = liege }
 			is_close_family_of = liege
 			add = -75
 			desc = AI_THEIR_RELATIVE
 		}

 		#Family (at location)
 		modifier = {
 			exists = location
 			any_consort_not_in_traveling_family_trigger = yes
 			desc = AI_LEAVING_MY_SPOUSE
 			add = -100
 		}

 		modifier = {
 			exists = location
 			any_child_not_in_traveling_family_trigger = yes
 			desc = AI_LEAVING_MY_CHILD
 			add = -100
 		}

 		modifier = {
 			add = -50
 			desc = AI_MARRIED_MATRILINIALLY
 			is_married = yes
 			is_male = yes
 			any_spouse = {
 				matrilinear_marriage = yes
 				host = scope:recipient.host
 			}
 		}

 		modifier = {
 			add = -50
 			desc = AI_MARRIED_PATRILINIALLY
 			is_married = yes
 			is_female = yes
 			any_spouse = {
 				patrilinear_marriage = yes
 				host = scope:recipient.host
 			}
 		}

 		modifier = {
 			add = -500
 			desc = AI_WANDERLUST
			is_child_of = scope:actor
 			has_character_modifier = lust_for_adventure
 		}
	}


	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:hook = yes
		}
	}

	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
}