namespace = create_minion

create_minion.1001 = {
	type = character_event
	title = create_minion.1001.t
	desc = create_minion.1001.desc
	theme = minion

	left_portrait = {
		character = scope:owner
		animation = personality_zealous
	}

	right_portrait = {
		character = scope:target
		animation = paranoia
	}

	# immediate = {
		
	# }

	# Deathknight
	option = {
		name = create_minion.1001.a
		custom_tooltip = create_minion.1001.a.tt

		scope:owner = {
			add_piety = {
				value = 0
				subtract = level_2_spell_cost_value
			}
		}

		hidden_effect = {
			random_list = {
				100 = {

					# Negative Modifiers

					# Ruler
					modifier = {
						scope:target = {
							is_ruler = yes
						}
						add = -20
					}
					# Has Empire
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_empire
						}
						add = -75
					}
					# Has Kingdom
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_kingdom
						}
						add = -70
					}
					# Has Duchy
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_duchy
						}
						add = -50
					}
					# Has County
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_county
						}
						add = -30
					}
					# Has Barony
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_barony
						}
						add = -10
					}

					# Spouse of Ruler
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }

							# primary_spouse.highest_held_title_tier = tier_empire
						}
						add = -10
					}
					# Spouse has Empire
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_empire
						}
						add = -40
					}
					# Spouse has Kingdom
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_kingdom
						}
						add = -35
					}
					# Spouse has Duchy
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_duchy
						}
						add = -25
					}
					# Spouse has County
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_county
						}
						add = -15
					}
					# Spouse has Barony
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_barony
						}
						add = -5
					}

					# Positive Modifiers

					# Intrigue
					modifier = {
						scope:owner.intrigue > scope:target.intrigue
						add = 15
					}
					# Learning
					modifier = {
						scope:owner.learning > scope:target.learning
						add = 15
					}

					# Vassal or Courtier

					modifier = {
						scope:target = {
							OR = {
								is_vassal_or_below_of = scope:owner
								is_courtier_of = scope:owner
							}
						}
						add = 15
					}

					modifier = {
						scope:target = {
							is_imprisoned_by = scope:owner
						}
						add = 30
					}

					scope:target = {
						add_trait = undead
						add_trait = deathknight
		
						if = {
							limit = {
								is_ruler = yes
							}
							depose = yes
						}
		
						if = {
							limit = {
								NOT = {
									faith = faith:great_old_one
								}
							}
							set_character_faith = faith:great_old_one
						}

						# from send_child_to_clergy_effect
						if = {
							limit = {
								is_married = yes
							}
							every_spouse = {
								divorce = scope:target
							}
						}
						if = {
							limit = {
								exists = betrothed
							}
							break_betrothal = betrothed
						}
						if = {
							limit = {
								is_concubine = yes
							}
							this.concubinist = {
								remove_concubine = scope:target
							}
						}
						if = {
							limit = {
								number_of_concubines > 0
							}
							every_concubine = {
								scope:target = {
									remove_concubine = prev
								}
							}
						}
		
						add_opinion = {
							modifier = undead_minion_opinion_modifier
							target = scope:owner
						}
		
						# variables for turning into greater undead later
						set_variable = {
							name = age_became_undead
							value = age
						}
						set_immortal_age = age
						set_variable = {
							name = preferred_immortal_age
							value = age
						}
						set_variable = {
							name = years_as_undead
							value = 0
						}
						set_variable = {
							name = warlock_master
							value = scope:owner
						}

						add_character_flag = { flag = is_undead_minion_flag }
						add_character_flag = { flag = joining_faction_block }

						scope:scheme = {
							end_scheme = yes
						}
					}

					scope:owner = {
						add_courtier = scope:target
					}

					scope:owner = {
						trigger_event = create_minion.1002
					}
				}
	
				# Failure
				100 = {
					scope:scheme = {
						end_scheme = yes
					}
					scope:owner = {
						trigger_event = create_minion.1003
					}
				}
			}
		}
	}

	# Abandon
	option = {
		name = create_minion.1001.b
		custom_tooltip = create_minion.1001.b.tt

		scope:scheme = {
			end_scheme = yes
		}
	}

	# Overlord
	option = {
		name = create_minion.1001.c
		custom_tooltip = create_minion.1001.c.tt

		trigger = {
			has_perk = temp_bone_1_perk
		}

		scope:owner = {
			add_piety = {
				value = 0
				subtract = level_4_spell_cost_value
			}
		}

		hidden_effect = {
			random_list = {
				100 = {

					# Negative Modifiers

					# Ruler
					modifier = {
						scope:target = {
							is_ruler = yes
						}
						add = -20
					}
					# Has Empire
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_empire
						}
						add = -75
					}
					# Has Kingdom
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_kingdom
						}
						add = -70
					}
					# Has Duchy
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_duchy
						}
						add = -50
					}
					# Has County
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_county
						}
						add = -30
					}
					# Has Barony
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_barony
						}
						add = -10
					}

					# Spouse of Ruler
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }

							# primary_spouse.highest_held_title_tier = tier_empire
						}
						add = -10
					}
					# Spouse has Empire
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_empire
						}
						add = -40
					}
					# Spouse has Kingdom
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_kingdom
						}
						add = -35
					}
					# Spouse has Duchy
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_duchy
						}
						add = -25
					}
					# Spouse has County
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_county
						}
						add = -15
					}
					# Spouse has Barony
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_barony
						}
						add = -5
					}

					# Positive Modifiers

					# Intrigue
					modifier = {
						scope:owner.intrigue > scope:target.intrigue
						add = 15
					}
					# Learning
					modifier = {
						scope:owner.learning > scope:target.learning
						add = 15
					}

					# Vassal or Courtier

					modifier = {
						scope:target = {
							OR = {
								is_vassal_or_below_of = scope:owner
								is_courtier_of = scope:owner
							}
						}
						add = 15
					}

					modifier = {
						scope:target = {
							is_imprisoned_by = scope:owner
						}
						add = 30
					}

					scope:target = {
						add_trait = undead
						add_trait = overlord
		
						if = {
							limit = {
								is_ruler = yes
							}
							depose = yes
						}
		
						if = {
							limit = {
								NOT = {
									faith = faith:great_old_one
								}
							}
							set_character_faith = faith:great_old_one
						}

						# from send_child_to_clergy_effect
						if = {
							limit = {
								is_married = yes
							}
							every_spouse = {
								divorce = scope:target
							}
						}
						if = {
							limit = {
								exists = betrothed
							}
							break_betrothal = betrothed
						}
						if = {
							limit = {
								is_concubine = yes
							}
							this.concubinist = {
								remove_concubine = scope:target
							}
						}
						if = {
							limit = {
								number_of_concubines > 0
							}
							every_concubine = {
								scope:target = {
									remove_concubine = prev
								}
							}
						}
		
						add_opinion = {
							modifier = undead_minion_opinion_modifier
							target = scope:owner
						}
		
						# variables for turning into greater undead later
						set_variable = {
							name = age_became_undead
							value = age
						}

						set_immortal_age = colourful_haired_immortal_age
						set_variable = {
							name = preferred_immortal_age
							value = colourful_haired_immortal_age
						}

						set_variable = {
							name = years_as_undead
							value = 0
						}
						set_variable = {
							name = warlock_master
							value = scope:owner
						}

						add_character_flag = { flag = is_undead_minion_flag }
						add_character_flag = { flag = joining_faction_block }

						scope:scheme = {
							end_scheme = yes
						}
					}

					scope:owner = {
						add_courtier = scope:target
					}

					scope:owner = {
						trigger_event = create_minion.1004
					}
				}
	
				# Failure
				100 = {
					scope:scheme = {
						end_scheme = yes
					}
					scope:owner = {
						trigger_event = create_minion.1003
					}
				}
			}
		}
	}

	# Pale Bishop
	option = {
		name = create_minion.1001.d
		custom_tooltip = create_minion.1001.d.tt

		trigger = {
			has_perk = create_lesser_lich_perk
		}

		scope:owner = {
			add_piety = {
				value = 0
				subtract = level_3_spell_cost_value
			}
		}

		hidden_effect = {
			random_list = {
				100 = {

					# Negative Modifiers

					# Ruler
					modifier = {
						scope:target = {
							is_ruler = yes
						}
						add = -20
					}
					# Has Empire
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_empire
						}
						add = -75
					}
					# Has Kingdom
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_kingdom
						}
						add = -70
					}
					# Has Duchy
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_duchy
						}
						add = -50
					}
					# Has County
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_county
						}
						add = -30
					}
					# Has Barony
					modifier = {
						scope:target = {
							highest_held_title_tier = tier_barony
						}
						add = -10
					}

					# Spouse of Ruler
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }

							# primary_spouse.highest_held_title_tier = tier_empire
						}
						add = -10
					}
					# Spouse has Empire
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_empire
						}
						add = -40
					}
					# Spouse has Kingdom
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_kingdom
						}
						add = -35
					}
					# Spouse has Duchy
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_duchy
						}
						add = -25
					}
					# Spouse has County
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_county
						}
						add = -15
					}
					# Spouse has Barony
					modifier = {
						scope:target = {
							is_landed = no
							exists = primary_spouse
							primary_spouse = { is_landed = yes }
							primary_spouse.highest_held_title_tier = tier_barony
						}
						add = -5
					}

					# Positive Modifiers

					# Intrigue
					modifier = {
						scope:owner.intrigue > scope:target.intrigue
						add = 15
					}
					# Learning
					modifier = {
						scope:owner.learning > scope:target.learning
						add = 15
					}

					# Vassal or Courtier

					modifier = {
						scope:target = {
							OR = {
								is_vassal_or_below_of = scope:owner
								is_courtier_of = scope:owner
							}
						}
						add = 15
					}

					modifier = {
						scope:target = {
							is_imprisoned_by = scope:owner
						}
						add = 30
					}

					scope:target = {
						add_trait = undead
						add_trait = pale_bishop
		
						if = {
							limit = {
								is_ruler = yes
							}
							depose = yes
						}
		
						if = {
							limit = {
								NOT = {
									faith = faith:great_old_one
								}
							}
							set_character_faith = faith:great_old_one
						}

						# from send_child_to_clergy_effect
						if = {
							limit = {
								is_married = yes
							}
							every_spouse = {
								divorce = scope:target
							}
						}
						if = {
							limit = {
								exists = betrothed
							}
							break_betrothal = betrothed
						}
						if = {
							limit = {
								is_concubine = yes
							}
							this.concubinist = {
								remove_concubine = scope:target
							}
						}
						if = {
							limit = {
								number_of_concubines > 0
							}
							every_concubine = {
								scope:target = {
									remove_concubine = prev
								}
							}
						}
		
						add_opinion = {
							modifier = undead_minion_opinion_modifier
							target = scope:owner
						}

						add_character_modifier = {
							modifier = transferring_piety_modifier
						}
		
						# variables for turning into greater undead later
						set_variable = {
							name = age_became_undead
							value = age
						}
						set_immortal_age = colourful_haired_immortal_age
						set_variable = {
							name = preferred_immortal_age
							value = colourful_haired_immortal_age
						}
						set_variable = {
							name = years_as_undead
							value = 0
						}
						set_variable = {
							name = warlock_master
							value = scope:owner
						}
						add_character_flag = { flag = is_undead_minion_flag }
						add_character_flag = { flag = joining_faction_block }

						scope:scheme = {
							end_scheme = yes
						}
					}

					scope:owner = {
						add_courtier = scope:target
						add_character_modifier = {
							modifier = receiving_piety_modifier
						}
					}

					scope:owner = {
						trigger_event = create_minion.1005
					}
				}
	
				# Failure
				100 = {
					scope:scheme = {
						end_scheme = yes
					}
					scope:owner = {
						trigger_event = create_minion.1003
					}
				}
			}
		}
	}
}

# Successfully Created Deathknight
create_minion.1002 = {
	type = character_event
	title = create_minion.1002.t
	desc = create_minion.1002.desc
	theme = minion

	left_portrait = {
		character = scope:owner
		animation = personality_zealous
	}

	right_portrait = {
		character = scope:target
		animation = war_over_win
	}

	option = {
		name = create_minion.1002.a
		custom_tooltip = create_minion.1002.a.tt
		# scope:scheme = {
		# 	end_scheme = yes
		# }
	}
}

# Failed to Create Deathknight
create_minion.1003 = {
	type = character_event
	title = create_minion.1003.t
	desc = create_minion.1003.desc
	theme = minion

	left_portrait = {
		character = scope:owner
		animation = boredom
	}

	right_portrait = {
		character = scope:target
		animation = personality_honorable
	}

	option = {
		name = create_minion.1003.a
		custom_tooltip = create_minion.1003.a.tt
		# scope:scheme = {
		# 	end_scheme = yes
		# }
	}
}

# Successfully Created Overlord
create_minion.1004 = {
	type = character_event
	title = create_minion.1004.t
	desc = create_minion.1004.desc
	theme = minion

	left_portrait = {
		character = scope:owner
		animation = personality_zealous
	}

	right_portrait = {
		character = scope:target
		animation = war_over_win
	}

	option = {
		name = create_minion.1004.a
		custom_tooltip = create_minion.1004.a.tt
	}
}

# Successfully Created Overlord
create_minion.1005 = {
	type = character_event
	title = create_minion.1005.t
	desc = create_minion.1005.desc
	theme = minion

	left_portrait = {
		character = scope:owner
		animation = personality_zealous
	}

	right_portrait = {
		character = scope:target
		animation = war_over_win
	}

	option = {
		name = create_minion.1005.a
		custom_tooltip = create_minion.1005.a.tt
	}
}